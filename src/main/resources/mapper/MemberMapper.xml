<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.crazy.mapper.MemberMapper">
  <resultMap id="BaseResultMap" type="com.example.crazy.domain.Member">
    <id column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="BIT" property="sex" />
    <result column="telephone" jdbcType="BIGINT" property="telephone" />
    <result column="capacity" jdbcType="VARCHAR" property="capacity" />
    <result column="hometown" jdbcType="VARCHAR" property="hometown" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.crazy.domain.Member">
    <result column="nickname" jdbcType="LONGVARCHAR" property="nickname" />
    <result column="apprise" jdbcType="LONGVARCHAR" property="apprise" />
    <result column="speciality" jdbcType="LONGVARCHAR" property="speciality" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_name, `password`, `name`, sex, telephone, capacity, hometown
  </sql>
  <sql id="Blob_Column_List">
    nickname, apprise, speciality
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.crazy.domain.MemberExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.crazy.domain.MemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from member
    where user_name = #{userName,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from member
    where user_name = #{userName,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.crazy.domain.MemberExample">
    delete from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.crazy.domain.Member">
    insert into member (user_name, `password`, `name`, 
      sex, telephone, capacity, 
      hometown, nickname, apprise, 
      speciality)
    values (#{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{sex,jdbcType=BIT}, #{telephone,jdbcType=BIGINT}, #{capacity,jdbcType=VARCHAR}, 
      #{hometown,jdbcType=VARCHAR}, #{nickname,jdbcType=LONGVARCHAR}, #{apprise,jdbcType=LONGVARCHAR}, 
      #{speciality,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.crazy.domain.Member">
    insert into member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        user_name,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="telephone != null">
        telephone,
      </if>
      <if test="capacity != null">
        capacity,
      </if>
      <if test="hometown != null">
        hometown,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="apprise != null">
        apprise,
      </if>
      <if test="speciality != null">
        speciality,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=BIT},
      </if>
      <if test="telephone != null">
        #{telephone,jdbcType=BIGINT},
      </if>
      <if test="capacity != null">
        #{capacity,jdbcType=VARCHAR},
      </if>
      <if test="hometown != null">
        #{hometown,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=LONGVARCHAR},
      </if>
      <if test="apprise != null">
        #{apprise,jdbcType=LONGVARCHAR},
      </if>
      <if test="speciality != null">
        #{speciality,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.crazy.domain.MemberExample" resultType="java.lang.Long">
    select count(*) from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update member
    <set>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        `password` = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=BIT},
      </if>
      <if test="record.telephone != null">
        telephone = #{record.telephone,jdbcType=BIGINT},
      </if>
      <if test="record.capacity != null">
        capacity = #{record.capacity,jdbcType=VARCHAR},
      </if>
      <if test="record.hometown != null">
        hometown = #{record.hometown,jdbcType=VARCHAR},
      </if>
      <if test="record.nickname != null">
        nickname = #{record.nickname,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.apprise != null">
        apprise = #{record.apprise,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.speciality != null">
        speciality = #{record.speciality,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update member
    set user_name = #{record.userName,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=VARCHAR},
      `name` = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=BIT},
      telephone = #{record.telephone,jdbcType=BIGINT},
      capacity = #{record.capacity,jdbcType=VARCHAR},
      hometown = #{record.hometown,jdbcType=VARCHAR},
      nickname = #{record.nickname,jdbcType=LONGVARCHAR},
      apprise = #{record.apprise,jdbcType=LONGVARCHAR},
      speciality = #{record.speciality,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update member
    set user_name = #{record.userName,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=VARCHAR},
      `name` = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=BIT},
      telephone = #{record.telephone,jdbcType=BIGINT},
      capacity = #{record.capacity,jdbcType=VARCHAR},
      hometown = #{record.hometown,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.crazy.domain.Member">
    update member
    <set>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=BIT},
      </if>
      <if test="telephone != null">
        telephone = #{telephone,jdbcType=BIGINT},
      </if>
      <if test="capacity != null">
        capacity = #{capacity,jdbcType=VARCHAR},
      </if>
      <if test="hometown != null">
        hometown = #{hometown,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=LONGVARCHAR},
      </if>
      <if test="apprise != null">
        apprise = #{apprise,jdbcType=LONGVARCHAR},
      </if>
      <if test="speciality != null">
        speciality = #{speciality,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where user_name = #{userName,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.crazy.domain.Member">
    update member
    set `password` = #{password,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=BIT},
      telephone = #{telephone,jdbcType=BIGINT},
      capacity = #{capacity,jdbcType=VARCHAR},
      hometown = #{hometown,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=LONGVARCHAR},
      apprise = #{apprise,jdbcType=LONGVARCHAR},
      speciality = #{speciality,jdbcType=LONGVARCHAR}
    where user_name = #{userName,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.crazy.domain.Member">
    update member
    set `password` = #{password,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=BIT},
      telephone = #{telephone,jdbcType=BIGINT},
      capacity = #{capacity,jdbcType=VARCHAR},
      hometown = #{hometown,jdbcType=VARCHAR}
    where user_name = #{userName,jdbcType=VARCHAR}
  </update>
</mapper>